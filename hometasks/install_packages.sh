#!/usr/bin/env bash
# install_packages.sh ‚Äî macOS (M1/M2), —Å–æ–≤–º–µ—Å—Ç–∏–º —Å bash 3.2
# –°–æ–∑–¥–∞—ë—Ç .venv, —Å—Ç–∞–≤–∏—Ç –Ω—É–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã. –ó–∞–ø—É—Å–∫–∞—Ç—å: bash ./install_packages.sh

set -euo pipefail

# 0) –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ bash, –∞ –Ω–µ zsh/sh
if [ -z "${BASH_VERSION:-}" ]; then
  echo "‚ùå –≠—Ç–æ –Ω–µ bash. –ó–∞–ø—É—Å—Ç–∏ —Ç–∞–∫: bash ./install_packages.sh" >&2
  exit 1
fi

# 1) Python
if ! command -v python3 >/dev/null 2>&1; then
  echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω python3. –£—Å—Ç–∞–Ω–æ–≤–∏: brew install python" >&2
  exit 1
fi
PY="$(command -v python3)"
PYVER="$("$PY" -c 'import sys; print(".".join(map(str, sys.version_info[:3])))')"
echo "‚û°Ô∏è  Python: $PY ($PYVER)"

# 2) venv
VENV_DIR=".venv"
if [ ! -d "$VENV_DIR" ]; then
  echo "‚û°Ô∏è  –°–æ–∑–¥–∞—é venv –≤ $VENV_DIR"
  "$PY" -m venv "$VENV_DIR"
fi
# shellcheck disable=SC1091
. "$VENV_DIR/bin/activate"

# 3) pip –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
python -m pip install -U pip setuptools wheel >/dev/null

# 4) –ú–∞–ø–ø–∏–Ω–≥: –º–æ–¥—É–ª—å -> pip-–ø–∞–∫–µ—Ç (—á–µ—Ä–µ–∑ case, –±–µ–∑ mapfile/assoc arrays)
mod2pkg () {
  case "$1" in
    numpy) echo numpy ;;
    scipy) echo scipy ;;
    statsmodels) echo statsmodels ;;
    sklearn) echo scikit-learn ;;
    seaborn) echo seaborn ;;
    matplotlib) echo matplotlib ;;
    pandas) echo pandas ;;
    *) echo "" ;;
  esac
}

# 5) –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞/—Å–∏–º–≤–æ–ª–æ–≤
check_import () {
  python - "$1" <<'PY'
import importlib, sys
mod = sys.argv[1]
try:
    importlib.import_module(mod)
    sys.exit(0)
except Exception:
    sys.exit(1)
PY
}

check_symbols () {
  mod="$1"; csv_syms="$2"
  python - "$mod" "$csv_syms" <<'PY'
import importlib, sys
mod = importlib.import_module(sys.argv[1])
need = [s.strip() for s in sys.argv[2].split(",") if s.strip()]
missing = [s for s in need if not hasattr(mod, s)]
sys.exit(0 if not missing else 1)
PY
}

# 6) –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
PY_MODULES="scipy numpy statsmodels sklearn seaborn matplotlib pandas"
missing_pkgs=""

echo "‚û°Ô∏è  –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã‚Ä¶"
for m in $PY_MODULES; do
  if check_import "$m"; then
    echo "   ‚úÖ $m"
  else
    pkg="$(mod2pkg "$m")"
    if [ -n "$pkg" ]; then
      echo "   ‚ùå $m (–¥–æ–±–∞–≤–ª—è—é –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: $pkg)"
      missing_pkgs="$missing_pkgs $pkg"
    else
      echo "   ‚ö†Ô∏è  $m: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π pip-–ø–∞–∫–µ—Ç"
    fi
  fi
done

echo "‚û°Ô∏è  –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á–µ–≤—ã–µ –ø–æ–¥–º–æ–¥—É–ª–∏ –∏ —Å–∏–º–≤–æ–ª—ã‚Ä¶"
SYM_CHECKS="
scipy.interpolate:splrep,splev
scipy.stats:bws_test
statsmodels.api:OLS
statsmodels.stats.api:ttest_ind
sklearn.linear_model:LinearRegression,HuberRegressor,RANSACRegressor
sklearn.cluster:KMeans,DBSCAN,SpectralClustering,OPTICS,AgglomerativeClustering
sklearn.metrics:mean_squared_error,silhouette_score,adjusted_rand_score,accuracy_score,confusion_matrix
sklearn.svm:SVC
sklearn.decomposition:PCA
sklearn.cross_decomposition:CCA
sklearn.discriminant_analysis:LinearDiscriminantAnalysis
sklearn.preprocessing:StandardScaler,LabelEncoder
sklearn.model_selection:train_test_split
statsmodels.regression.quantile_regression:QuantReg
scipy.linalg:eigh
scipy.cluster.hierarchy:dendrogram,linkage
"

# –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –µ—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –º–æ–¥—É–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–µ —Ä–∏—Å—É–µ–º –ª–æ–∂–Ω—ã–π "‚úÖ"
IFS=$'\n'
for item in $SYM_CHECKS; do
  mod="${item%%:*}"
  syms="${item#*:}"
  root="${mod%%.*}"
  pkg="$(mod2pkg "$root")"

  if ! check_import "$root"; then
    echo "   ‚è≠Ô∏è  $mod: –±–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å '$root' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤–∏–º –µ–≥–æ."
    [ -n "$pkg" ] && missing_pkgs="$missing_pkgs $pkg"
    continue
  fi

  if check_symbols "$mod" "$syms"; then
    echo "   ‚úÖ $mod"
  else
    echo "   ‚ùå $mod: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∏–º–≤–æ–ª—ã ($syms). –û–±–Ω–æ–≤–∏–º $pkg."
    [ -n "$pkg" ] && missing_pkgs="$missing_pkgs $pkg"
  fi
done
unset IFS

# 7) –£—Å—Ç–∞–Ω–æ–≤–∏–º/–æ–±–Ω–æ–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ (—É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ mapfile)
# shellcheck disable=SC2086
if [ -n "$missing_pkgs" ]; then
  pkgs="$(printf '%s\n' $missing_pkgs | sed '/^$/d' | sort -u | tr '\n' ' ')"
  echo "‚û°Ô∏è  –°—Ç–∞–≤–ª—é/–æ–±–Ω–æ–≤–ª—è—é: $pkgs"
  # shellcheck disable=SC2086
  python -m pip install -U $pkgs
else
  echo "‚úÖ –í—Å—ë —É–∂–µ —Å—Ç–æ–∏—Ç."
fi

# 8) –ü—Ä–æ–≤–µ—Ä–∫–∞ 'pc'
echo "‚û°Ô∏è  –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–¥—É–ª—å 'pc'‚Ä¶"
if check_import "pc"; then
  echo "   ‚úÖ pc"
else
  echo "   ‚ö†Ô∏è  'pc' –Ω–µ –Ω–∞–π–¥–µ–Ω: —ç—Ç–æ –ª–∏–±–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å, –ª–∏–±–æ —É –Ω–µ–≥–æ –¥—Ä—É–≥–æ–µ –∏–º—è –Ω–∞ PyPI."
fi

# 9) –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
echo "‚û°Ô∏è  –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤‚Ä¶"
python - <<'PY'
import sys
try:
    from scipy.interpolate import splrep, splev
    import statsmodels, statsmodels.api as sm, statsmodels.stats.api as ssa
    import scipy, numpy as np, random, sklearn, seaborn as sns
    import scipy.stats as sps
    import matplotlib.pyplot as plt
    import math, csv, pandas as pd
    from scipy.stats import bws_test
    from sklearn import linear_model
    from sklearn.linear_model import LinearRegression, HuberRegressor, RANSACRegressor
    from sklearn.metrics import mean_squared_error, silhouette_score, adjusted_rand_score, accuracy_score, confusion_matrix
    from statsmodels.regression.quantile_regression import QuantReg
    from sklearn.cluster import KMeans, DBSCAN, SpectralClustering, OPTICS, AgglomerativeClustering
    from scipy.cluster.hierarchy import dendrogram, linkage
    from scipy.linalg import eigh as sp_eigh
    from sklearn.datasets import load_iris
    from sklearn.preprocessing import StandardScaler, LabelEncoder
    from sklearn.model_selection import train_test_split
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.svm import SVC
    from sklearn.decomposition import PCA
    from sklearn.cross_decomposition import CCA
    try:
        import pc
    except Exception:
        pass
except ModuleNotFoundError as e:
    print(f"‚ùå ModuleNotFoundError: {e}", file=sys.stderr); sys.exit(1)
except AttributeError as e:
    print(f"‚ùå AttributeError: {e}", file=sys.stderr); sys.exit(2)
print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –æ–∫ (–∫—Ä–æ–º–µ, –≤–æ–∑–º–æ–∂–Ω–æ, 'pc').")
PY

echo "üéâ –ì–æ—Ç–æ–≤–æ."